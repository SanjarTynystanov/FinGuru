const translations = {
    ru: {
        'home-title': 'FinGuru ‚Äì –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫',
        'nav-home': '–ì–ª–∞–≤–Ω–∞—è',
        'nav-features': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        'nav-currency': '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä',
        'feature-budget-menu': '–ë—é–¥–∂–µ—Ç',
        'feature-dashboard-menu': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'feature-goals-menu': '–¶–µ–ª–∏',
        'feature-forecast-menu': '–ü—Ä–æ–≥–Ω–æ–∑',
        'feature-reminders-menu': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
        'feature-tips-menu': '–°–æ–≤–µ—Ç—ã',
        'nav-banks': '–ë–∞–Ω–∫–∏',
        'banks-connected': '–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ',
        'banks-add': '–î–æ–±–∞–≤–∏—Ç—å',
        'banks-settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        'banks-faq': 'FAQ',
        'nav-analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
        'nav-faq': 'FAQ',
        'login': '–í–æ–π—Ç–∏',
        'logout': '–í—ã—Ö–æ–¥',
        'register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'contacts': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        'phone': '–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90',
        'social-telegram': 'Telegram',
        'social-vk': 'VK',
        'subscribe': '–ü–æ–¥–ø–∏—Å–∫–∞',
        'subscribe-text': '–ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        'email-placeholder': '–í–∞—à email',
        'subscribe-btn': '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
        'footer-privacy': '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
        'footer-terms': '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        'footer-about-title': '–û FinGuru',
        'footer-about-text': 'FinGuru - —ç—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.',
        'quick-links': '–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏',
        'how-it-works': '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'testimonials': '–û—Ç–∑—ã–≤—ã',
        'cta': '–ù–∞—á–∞—Ç—å',
        'privacy-policy': '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
        'terms-of-use': '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        'footer-copyright': '¬© 2025 FinGuru. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.',
        'reminders-title': 'üîî –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
        'search-reminders': '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º',
        'clear-search': '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫',
        'reminder-title-placeholder': '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
        'add-reminder': '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        'edit-reminder': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
        'sort-date': '–ü–æ –¥–∞—Ç–µ',
        'sort-title': '–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
        'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ',
        'no-reminders': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
        'fill-all-fields': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
        'all-categories': '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        'category-bills': '–°—á–µ—Ç–∞',
        'category-investments': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
        'category-personal': '–õ–∏—á–Ω—ã–µ',
        'repeat-none': '–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
        'repeat-daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
        'repeat-weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
        'repeat-monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
        'confirm-delete-title': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
        'confirm-delete-text': '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?',
        'confirm': '–£–¥–∞–ª–∏—Ç—å',
        'cancel': '–û—Ç–º–µ–Ω–∞',
        'upcoming-reminder': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è: ',
        'export-format': '–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞',
        'export-ics': 'iCal (.ics)',
        'export-json': 'JSON (.json)',
        'export-csv': 'CSV (.csv)'
    },
    en: {
        'home-title': 'FinGuru ‚Äì Your Financial Assistant',
        'nav-home': 'Home',
        'nav-features': 'Features',
        'nav-currency': 'Converter',
        'feature-budget-menu': 'Budget',
        'feature-dashboard-menu': 'Dashboard',
        'feature-goals-menu': 'Goals',
        'feature-forecast-menu': 'Forecast',
        'feature-reminders-menu': 'Reminders',
        'feature-tips-menu': 'Tips',
        'nav-banks': 'Banks',
        'banks-connected': 'Connected',
        'banks-add': 'Add',
        'banks-settings': 'Settings',
        'banks-faq': 'FAQ',
        'nav-analytics': 'Analytics',
        'nav-faq': 'FAQ',
        'login': 'Login',
        'logout': 'Logout',
        'register': 'Register',
        'contacts': 'Contacts',
        'phone': 'Phone: +7 (123) 456-78-90',
        'social-telegram': 'Telegram',
        'social-vk': 'VK',
        'subscribe': 'Subscribe',
        'subscribe-text': 'Get the latest news and updates',
        'email-placeholder': 'Your email',
        'subscribe-btn': 'Subscribe',
        'footer-privacy': 'Privacy Policy',
        'footer-terms': 'Terms of Use',
        'footer-about-title': 'About FinGuru',
        'footer-about-text': 'FinGuru is your personal financial assistant, designed to help you manage your money, track expenses, and achieve your financial goals with ease.',
        'quick-links': 'Quick Links',
        'how-it-works': 'How It Works',
        'testimonials': 'Testimonials',
        'cta': 'Get Started',
        'privacy-policy': 'Privacy Policy',
        'terms-of-use': 'Terms of Use',
        'footer-copyright': '¬© 2025 FinGuru. All rights reserved.',
        'reminders-title': 'üîî Your Reminders',
        'search-reminders': 'Search reminders',
        'clear-search': 'Clear search',
        'reminder-title-placeholder': 'Reminder title',
        'add-reminder': 'Add reminder',
        'edit-reminder': 'Edit',
        'sort-date': 'By date',
        'sort-title': 'By title',
        'overdue': 'Overdue',
        'no-reminders': 'No reminders available',
        'fill-all-fields': 'Please fill all fields',
        'all-categories': 'All categories',
        'category-bills': 'Bills',
        'category-investments': 'Investments',
        'category-personal': 'Personal',
        'repeat-none': 'No repeat',
        'repeat-daily': 'Daily',
        'repeat-weekly': 'Weekly',
        'repeat-monthly': 'Monthly',
        'confirm-delete-title': 'Confirm Deletion',
        'confirm-delete-text': 'Are you sure you want to delete this reminder?',
        'confirm': 'Delete',
        'cancel': 'Cancel',
        'upcoming-reminder': 'Upcoming reminder: ',
        'export-format': 'Export format',
        'export-ics': 'iCal (.ics)',
        'export-json': 'JSON (.json)',
        'export-csv': 'CSV (.csv)'
    },
    ky: {
        'home-title': 'FinGuru ‚Äì –°–∏–∑–¥–∏–Ω –∫–∞—Ä–∂—ã –∂–∞—Ä–¥–∞–º—á—ã“£—ã–∑',
        'nav-home': '–ë–∞—à–∫—ã –±–µ—Ç',
        'nav-features': '–ú“Ø–º–∫“Ø–Ω—á“Ø–ª“Ø–∫—Ç”©—Ä',
        'nav-currency': '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä',
        'feature-budget-menu': '–ë—é–¥–∂–µ—Ç',
        'feature-dashboard-menu': '–ë–∞—à–∫–∞—Ä—É—É –ø–∞–Ω–µ–ª–∏',
        'feature-goals-menu': '–ú–∞–∫—Å–∞—Ç—Ç–∞—Ä',
        'feature-forecast-menu': '–ë–æ–ª–∂–æ–ª–¥–æ–æ',
        'feature-reminders-menu': '–≠—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä',
        'feature-tips-menu': '–ö–µ“£–µ—à—Ç–µ—Ä',
        'nav-banks': '–ë–∞–Ω–∫—Ç–∞—Ä',
        'banks-connected': '–¢—É—Ç–∞—à–∫–∞–Ω',
        'banks-add': '–ö–æ—à—É—É',
        'banks-settings': '–ñ”©–Ω–¥”©”©–ª”©—Ä',
        'banks-faq': 'FAQ',
        'nav-analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
        'nav-faq': '–°—É—Ä–∞–∫—Ç–∞—Ä',
        'login': '–ö–∏—Ä“Ø“Ø',
        'logout': '–ß—ã–≥—É—É',
        'register': '–ö–∞—Ç—Ç–∞–ª—É—É',
        'contacts': '–ë–∞–π–ª–∞–Ω—ã—à',
        'phone': '–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90',
        'social-telegram': 'Telegram',
        'social-vk': 'VK',
        'subscribe': '–ñ–∞–∑—ã–ª—É—É',
        'subscribe-text': '–ê–∫—ã—Ä–∫—ã –∂–∞“£—ã–ª—ã–∫—Ç–∞—Ä–¥—ã –∂–∞–Ω–∞ –∂–∞“£—ã—Ä—Ç—É—É–ª–∞—Ä–¥—ã –∞–ª—ã“£—ã–∑',
        'email-placeholder': '–°–∏–∑–¥–∏–Ω email',
        'subscribe-btn': '–ñ–∞–∑—ã–ª—É—É',
        'footer-privacy': '–ñ–µ–∫–µ –º–∞–∞–ª—ã–º–∞—Ç —Å–∞—è—Å–∞—Ç—ã',
        'footer-terms': '–ö–æ–ª–¥–æ–Ω—É—É —à–∞—Ä—Ç—Ç–∞—Ä—ã',
        'footer-about-title': 'FinGuru –∂”©–Ω“Ø–Ω–¥”©',
        'footer-about-text': 'FinGuru - –±—É–ª —Å–∏–∑–¥–∏–Ω –∂–µ–∫–µ –∫–∞—Ä–∂—ã –∂–∞—Ä–¥–∞–º—á—ã“£—ã–∑, –∞–ª —Å–∏–∑–≥–µ –∞–∫—á–∞“£—ã–∑–¥—ã –æ“£–æ–π –±–∞—à–∫–∞—Ä—É—É–≥–∞, —á—ã–≥—ã–º–¥–∞—Ä–¥—ã –∫”©–∑”©–º”©–ª–¥”©”©–≥”© –∂–∞–Ω–∞ –∫–∞—Ä–∂—ã –º–∞–∫—Å–∞—Ç—Ç–∞—Ä—ã“£—ã–∑–≥–∞ –∂–µ—Ç“Ø“Ø–≥”© –∂–∞—Ä–¥–∞–º –±–µ—Ä–µ—Ç.',
        'quick-links': '–¢–µ–∑ —à–∏–ª—Ç–µ–º–µ–ª–µ—Ä',
        'how-it-works': '–ë—É–ª –∫–∞–Ω—Ç–∏–ø –∏—à—Ç–µ–π—Ç',
        'testimonials': '–ü–∏–∫–∏—Ä–ª–µ—Ä',
        'cta': '–ë–∞—à—Ç–æ–æ',
        'privacy-policy': '–ñ–µ–∫–µ –º–∞–∞–ª—ã–º–∞—Ç —Å–∞—è—Å–∞—Ç—ã',
        'terms-of-use': '–ö–æ–ª–¥–æ–Ω—É—É —à–∞—Ä—Ç—Ç–∞—Ä—ã',
        'footer-copyright': '¬© 2025 FinGuru. –ë–∞—Ä–¥—ã–∫ —É–∫—É–∫—Ç–∞—Ä –∫–æ—Ä–≥–æ–ª–≥–æ–Ω.',
        'reminders-title': 'üîî –°–∏–∑–¥–∏–Ω —ç—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä–∏“£–∏–∑',
        'search-reminders': '–≠—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä–¥–∏ –∏–∑–¥”©”©',
        'clear-search': '–ò–∑–¥”©”©–Ω“Ø —Ç–∞–∑–∞–ª–æ–æ',
        'reminder-title-placeholder': '–≠—Å–∫–µ—Ä—Ç–º–µ –∞—Ç–∞–ª—ã—à—ã',
        'add-reminder': '–≠—Å–∫–µ—Ä—Ç–º–µ –∫–æ—à—É—É',
        'edit-reminder': '–û“£–¥–æ–æ',
        'sort-date': '–î–∞—Ç–∞ –±–æ—é–Ω—á–∞',
        'sort-title': '–ê—Ç–∞–ª—ã—à –±–æ—é–Ω—á–∞',
        'overdue': '–ú”©”©–Ω”©—Ç“Ø ”©—Ç–∫”©–Ω',
        'no-reminders': '–≠—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä –∂–æ–∫',
        'fill-all-fields': '–ë–∞—Ä–¥—ã–∫ —Ç–∞–ª–∞–∞–ª–∞—Ä–¥—ã —Ç–æ–ª—Ç—É—Ä—É“£—É–∑',
        'all-categories': '–ë–∞—Ä–¥—ã–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä',
        'category-bills': '–≠—Å–µ–ø—Ç–µ—Ä',
        'category-investments': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–ª–∞—Ä',
        'category-personal': '–ñ–µ–∫–µ',
        'repeat-none': '–ö–∞–π—Ç–∞–ª–∞–Ω–±–∞–π—Ç',
        'repeat-daily': '–ö“Ø–Ω —Å–∞–π—ã–Ω',
        'repeat-weekly': '–ñ—É–º–∞ —Å–∞–π—ã–Ω',
        'repeat-monthly': '–ê–π —Å–∞–π—ã–Ω',
        'confirm-delete-title': '–ñ–æ–∫ –∫—ã–ª—É—É–Ω—É —ã—Ä–∞—Å—Ç–æ–æ',
        'confirm-delete-text': '–ë—É–ª —ç—Å–∫–µ—Ä—Ç–º–µ–Ω–∏ —á—ã–Ω —ç–ª–µ –∂–æ–∫ –∫—ã–ª–≥—ã“£—ã–∑ –∫–µ–ª–µ–±–∏?',
        'confirm': '–ñ–æ–∫ –∫—ã–ª—É—É',
        'cancel': '–ñ–æ–∫–∫–æ —á—ã–≥–∞—Ä—É—É',
        'upcoming-reminder': '–ñ–∞–∫—ã–Ω–¥–∞–ø –∫–µ–ª–µ –∂–∞—Ç–∫–∞–Ω —ç—Å–∫–µ—Ä—Ç–º–µ: ',
        'export-format': '–≠–∫—Å–ø–æ—Ä—Ç —Ñ–æ—Ä–º–∞—Ç—ã',
        'export-ics': 'iCal (.ics)',
        'export-json': 'JSON (.json)',
        'export-csv': 'CSV (.csv)'
    }
};

let currentLang = localStorage.getItem('language') || 'ru';
let currentTheme = localStorage.getItem('theme') || 'light';

function updateLanguage() {
    document.querySelectorAll('[data-lang-key]').forEach(el => {
        const key = el.dataset.langKey;
        if (key && translations[currentLang][key]) {
            el.textContent = translations[currentLang][key];
        }
    });

    document.querySelectorAll('[data-lang-key-placeholder]').forEach(el => {
        const key = el.dataset.langKeyPlaceholder;
        if (key && translations[currentLang][key]) {
            el.placeholder = translations[currentLang][key];
        }
    });

    document.documentElement.lang = currentLang;
}

function applyTheme() {
    const body = document.body;
    if (currentTheme === 'dark') {
        body.classList.add('dark-theme');
        body.classList.remove('light-theme');
    } else {
        body.classList.add('light-theme');
        body.classList.remove('dark-theme');
    }
    localStorage.setItem('theme', currentTheme);
}

document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞
    document.querySelectorAll('.lang-btn').forEach(btn => {
        if (btn.dataset.lang === currentLang) btn.classList.add('active');
        btn.addEventListener('click', () => {
            document.querySelectorAll('.lang-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            currentLang = btn.dataset.lang;
            localStorage.setItem('language', currentLang);
            updateLanguage();
        });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
    const themeBtn = document.getElementById('themeToggle');
    if (themeBtn) {
        applyTheme();
        themeBtn.addEventListener('click', () => {
            currentTheme = currentTheme === 'light' ? 'dark' : 'light';
            applyTheme();
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    updateLanguage();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é
    document.querySelectorAll('.dropdown-toggle').forEach(button => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            const menu = button.nextElementSibling;
            const isExpanded = button.getAttribute('aria-expanded') === 'true';

            document.querySelectorAll('.dropdown-menu.show').forEach(openMenu => {
                if (openMenu !== menu) {
                    openMenu.classList.remove('show');
                    openMenu.previousElementSibling.setAttribute('aria-expanded', 'false');
                }
            });

            menu.classList.toggle('show', !isExpanded);
            button.setAttribute('aria-expanded', !isExpanded);

            if (menu.classList.contains('show')) {
                const rect = menu.getBoundingClientRect();
                if (rect.right > window.innerWidth - 10) {
                    menu.style.left = 'unset';
                    menu.style.right = '0';
                } else if (rect.left < 10) {
                    menu.style.left = '0';
                    menu.style.right = 'unset';
                } else {
                    menu.style.left = '0';
                    menu.style.right = 'unset';
                }
            }
        });
    });

    document.addEventListener('click', (e) => {
        const isDropdownClick = e.target.closest('.dropdown');
        if (!isDropdownClick) {
            document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                menu.classList.remove('show');
                menu.previousElementSibling.setAttribute('aria-expanded', 'false');
            });
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    window.logoutUser = function() {
        fetch('/logout', {
            method: 'POST',
        })
            .then(res => res.json())
            .then(data => {
                alert(data.message);
                window.location.href = data.redirect;
            })
            .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', err));
    };

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const reminderForm = document.querySelector('.reminder-form');
    const reminderTitleInput = document.getElementById('reminder-title');
    const reminderDateInput = document.getElementById('reminder-date');
    const reminderCategorySelect = document.getElementById('reminder-category');
    const reminderRepeatSelect = document.getElementById('reminder-repeat');
    const addReminderBtn = document.getElementById('add-reminder-btn');
    const remindersList = document.getElementById('reminders-list');
    const searchInput = document.getElementById('reminder-search');
    const categoryFilter = document.getElementById('category-filter');
    const sortSelect = document.getElementById('sort-select');
    const clearSearchBtn = document.getElementById('clear-search-btn');
    const deleteModal = document.getElementById('delete-modal');
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    const cancelDeleteBtn = document.getElementById('cancel-delete-btn');

    let reminders = JSON.parse(localStorage.getItem('reminders')) || [];
    let editingReminderId = null;
    let sortOption = 'date';
    let reminderToDeleteId = null;

    const saveReminders = () => localStorage.setItem('reminders', JSON.stringify(reminders));

    const sortReminders = (option) => {
        switch (option) {
            case 'date':
                reminders.sort((a, b) => new Date(a.date) - new Date(b.date));
                break;
            case 'title':
                reminders.sort((a, b) => a.title.localeCompare(b.title));
                break;
            default:
                break;
        }
    };

    const calculateProgress = (reminderDate, createDate) => {
        const now = new Date();
        const start = new Date(createDate);
        const end = new Date(reminderDate);
        if (end < now) return 100;
        if (start > now) return 0;
        const total = end - start;
        const elapsed = now - start;
        return Math.min(100, Math.max(0, (elapsed / total) * 100));
    };

    const checkForNotifications = () => {
        const now = new Date();
        reminders.forEach(reminder => {
            const reminderDate = new Date(reminder.date);
            const timeDiff = reminderDate - now;
            const hours24 = 24 * 60 * 60 * 1000;
            if (timeDiff > 0 && timeDiff <= hours24 && !reminder.notified) {
                if (Notification.permission === 'granted') {
                    new Notification(translations[currentLang]['upcoming-reminder'] + reminder.title, {
                        body: `–î–∞—Ç–∞: ${reminderDate.toLocaleString()}`,
                        icon: '/static/images/favicon.ico'
                    });
                } else if (Notification.permission !== 'denied') {
                    Notification.requestPermission().then(permission => {
                        if (permission === 'granted') {
                            new Notification(translations[currentLang]['upcoming-reminder'] + reminder.title, {
                                body: `–î–∞—Ç–∞: ${reminderDate.toLocaleString()}`,
                                icon: '/static/images/favicon.ico'
                            });
                        }
                    });
                }
                reminder.notified = true;
                saveReminders();
            }
        });
    };

    const exportToICS = (reminder) => {
        const startDate = new Date(reminder.date);
        const endDate = new Date(startDate.getTime() + 60 * 60 * 1000); // +1 —á–∞—Å
        const icsContent = [
            'BEGIN:VCALENDAR',
            'VERSION:2.0',
            'BEGIN:VEVENT',
            `DTSTART:${startDate.toISOString().replace(/[-:]/g, '').split('.')[0]}Z`,
            `DTEND:${endDate.toISOString().replace(/[-:]/g, '').split('.')[0]}Z`,
            `SUMMARY:${reminder.title}`,
            `DESCRIPTION:${translations[currentLang]['category-' + reminder.category] || reminder.category}`,
            'END:VEVENT',
            'END:VCALENDAR'
        ].join('\n');
        const blob = new Blob([icsContent], { type: 'text/calendar' });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${reminder.title}.ics`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
    };

    const exportToJSON = (reminder) => {
        const jsonContent = JSON.stringify(reminder, null, 2);
        const blob = new Blob([jsonContent], { type: 'application/json' });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${reminder.title}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
    };

    const exportToCSV = (reminder) => {
        const csvContent = [
            'Title,Date,Category,Repeat,Created At',
            `"${reminder.title}","${new Date(reminder.date).toLocaleString()}","${translations[currentLang]['category-' + reminder.category]}","${translations[currentLang]['repeat-' + reminder.repeat]}","${new Date(reminder.createdAt).toLocaleString()}"`
        ].join('\n');
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${reminder.title}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
    };

    const renderReminders = (filter = '', category = 'all', sort = sortOption) => {
        remindersList.innerHTML = '';
        let filteredReminders = [...reminders].filter(reminder => 
            reminder.title.toLowerCase().includes(filter.toLowerCase()) &&
            (category === 'all' || reminder.category === category)
        );
        sortReminders(sort);
        const now = new Date();
        if (filteredReminders.length === 0) {
            const emptyMsg = document.createElement('p');
            emptyMsg.textContent = translations[currentLang]['no-reminders'];
            remindersList.appendChild(emptyMsg);
        } else {
            filteredReminders.forEach(reminder => {
                const reminderDate = new Date(reminder.date);
                const isOverdue = reminderDate < now;
                const timeDiff = reminderDate - now;
                const hours24 = 24 * 60 * 60 * 1000;
                const isUpcoming = timeDiff > 0 && timeDiff <= hours24;
                const progress = calculateProgress(reminderDate, reminder.createdAt);
                const reminderItem = document.createElement('div');
                reminderItem.className = `reminder-item ${isOverdue ? 'overdue' : ''} ${isUpcoming ? 'upcoming' : ''}`;
                reminderItem.setAttribute('role', 'article');
                reminderItem.setAttribute('aria-labelledby', `reminder-title-${reminder.id}`);
                reminderItem.innerHTML = `
                    <div class="reminder-details">
                        <h3 id="reminder-title-${reminder.id}">${reminder.title}</h3>
                        <div class="reminder-date">${reminderDate.toLocaleString()}</div>
                        <span class="reminder-category" data-lang-key="category-${reminder.category}">${translations[currentLang]['category-' + reminder.category]}</span>
                        <div class="reminder-progress">
                            <div class="reminder-progress-bar" style="width: ${progress}%"></div>
                        </div>
                        ${isOverdue ? `<span class="overdue-label" data-lang-key="overdue">${translations[currentLang]['overdue']}</span>` : ''}
                    </div>
                    <div class="reminder-actions">
                        <button class="edit-reminder-btn" data-id="${reminder.id}" data-lang-key="edit-reminder" aria-label="${translations[currentLang]['edit-reminder']} ${reminder.title}">${translations[currentLang]['edit-reminder']}</button>
                        <div class="export-dropdown">
                            <button class="export-reminder-btn" data-id="${reminder.id}" aria-label="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.title}">
                                <i class="fas fa-download"></i>
                            </button>
                            <div class="export-options">
                                <span data-lang-key="export-format">${translations[currentLang]['export-format']}</span>
                                <a href="#" class="export-option export-ics" data-id="${reminder.id}" data-format="ics" data-lang-key="export-ics">${translations[currentLang]['export-ics']}</a>
                                <a href="#" class="export-option export-json" data-id="${reminder.id}" data-format="json" data-lang-key="export-json">${translations[currentLang]['export-json']}</a>
                                <a href="#" class="export-option export-csv" data-id="${reminder.id}" data-format="csv" data-lang-key="export-csv">${translations[currentLang]['export-csv']}</a>
                            </div>
                        </div>
                        <button class="delete-reminder-btn" data-id="${reminder.id}" aria-label="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.title}"><i class="fas fa-trash-alt"></i></button>
                    </div>
                `;
                remindersList.appendChild(reminderItem);
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            document.querySelectorAll('.export-reminder-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const options = btn.nextElementSibling;
                    const isVisible = options.style.display === 'block';
                    document.querySelectorAll('.export-options').forEach(opt => opt.style.display = 'none');
                    options.style.display = isVisible ? 'none' : 'block';
                });
            });

            document.querySelectorAll('.export-option').forEach(option => {
                option.addEventListener('click', (e) => {
                    e.preventDefault();
                    const id = parseInt(option.dataset.id);
                    const format = option.dataset.format;
                    const reminder = reminders.find(r => r.id === id);
                    if (reminder) {
                        switch (format) {
                            case 'ics':
                                exportToICS(reminder);
                                break;
                            case 'json':
                                exportToJSON(reminder);
                                break;
                            case 'csv':
                                exportToCSV(reminder);
                                break;
                        }
                    }
                    option.closest('.export-options').style.display = 'none';
                });
            });

            document.addEventListener('click', (e) => {
                if (!e.target.closest('.export-dropdown')) {
                    document.querySelectorAll('.export-options').forEach(opt => opt.style.display = 'none');
                }
            });
        }
    };

    const updateReminderDate = (reminder) => {
        const now = new Date();
        let nextDate = new Date(reminder.date);
        switch (reminder.repeat) {
            case 'daily':
                while (nextDate <= now) {
                    nextDate.setDate(nextDate.getDate() + 1);
                }
                break;
            case 'weekly':
                while (nextDate <= now) {
                    nextDate.setDate(nextDate.getDate() + 7);
                }
                break;
            case 'monthly':
                while (nextDate <= now) {
                    nextDate.setMonth(nextDate.getMonth() + 1);
                }
                break;
            default:
                break;
        }
        reminder.date = nextDate.toISOString();
        reminder.notified = false;
    };

    const addOrUpdateReminder = (e) => {
        e.preventDefault();
        const title = reminderTitleInput.value.trim();
        const date = reminderDateInput.value;
        const category = reminderCategorySelect.value;
        const repeat = reminderRepeatSelect.value;

        if (!title || !date) {
            alert(translations[currentLang]['fill-all-fields']);
            return;
        }

        if (editingReminderId) {
            reminders = reminders.map(reminder => 
                reminder.id === editingReminderId ? { ...reminder, title, date, category, repeat, notified: false } : reminder
            );
            editingReminderId = null;
            addReminderBtn.textContent = translations[currentLang]['add-reminder'];
        } else {
            const newReminder = {
                id: Date.now(),
                title,
                date,
                category,
                repeat,
                createdAt: new Date().toISOString(),
                notified: false
            };
            reminders.push(newReminder);
        }

        saveReminders();
        renderReminders(searchInput.value, categoryFilter.value, sortOption);
        reminderForm.reset();
    };

    reminderForm.addEventListener('submit', addOrUpdateReminder);

    remindersList.addEventListener('click', (e) => {
        e.preventDefault();
        const id = parseInt(e.target.dataset.id) || parseInt(e.target.parentElement.dataset.id);
        if (e.target.classList.contains('edit-reminder-btn') || e.target.parentElement.classList.contains('edit-reminder-btn')) {
            const reminder = reminders.find(r => r.id === id);
            if (reminder) {
                reminderTitleInput.value = reminder.title;
                reminderDateInput.value = reminder.date.slice(0, 16);
                reminderCategorySelect.value = reminder.category;
                reminderRepeatSelect.value = reminder.repeat;
                editingReminderId = id;
                addReminderBtn.textContent = translations[currentLang]['edit-reminder'];
            }
        } else if (e.target.classList.contains('delete-reminder-btn') || e.target.parentElement.classList.contains('delete-reminder-btn')) {
            reminderToDeleteId = id;
            deleteModal.classList.add('show');
            deleteModal.setAttribute('aria-hidden', 'false');
            confirmDeleteBtn.focus();
        }
    });

    confirmDeleteBtn.addEventListener('click', () => {
        if (reminderToDeleteId) {
            reminders = reminders.filter(r => r.id !== reminderToDeleteId);
            saveReminders();
            renderReminders(searchInput.value, categoryFilter.value, sortOption);
        }
        deleteModal.classList.remove('show');
        deleteModal.setAttribute('aria-hidden', 'true');
        reminderToDeleteId = null;
    });

    cancelDeleteBtn.addEventListener('click', () => {
        deleteModal.classList.remove('show');
        deleteModal.setAttribute('aria-hidden', 'true');
        reminderToDeleteId = null;
    });

    searchInput.addEventListener('input', (e) => {
        renderReminders(e.target.value, categoryFilter.value, sortOption);
    });

    categoryFilter.addEventListener('change', (e) => {
        renderReminders(searchInput.value, e.target.value, sortOption);
    });

    clearSearchBtn.addEventListener('click', () => {
        searchInput.value = '';
        renderReminders('', categoryFilter.value, sortOption);
    });

    sortSelect.addEventListener('change', (e) => {
        sortOption = e.target.value;
        renderReminders(searchInput.value, categoryFilter.value, sortOption);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    setInterval(() => {
        const now = new Date();
        reminders.forEach(reminder => {
            const reminderDate = new Date(reminder.date);
            if (reminderDate < now && reminder.repeat !== 'none') {
                updateReminderDate(reminder);
            }
        });
        saveReminders();
        renderReminders(searchInput.value, categoryFilter.value, sortOption);
        checkForNotifications();
    }, 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    renderReminders();
    checkForNotifications();
});